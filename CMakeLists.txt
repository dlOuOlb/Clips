cmake_minimum_required(VERSION 3.0)
project(Clips)

# Settings
if(DEFINED ENV{INTELOCLSDKROOT})
	set(DIR_INC ./Headers $ENV{INTELOCLSDKROOT}/include)
	if(CMAKE_SIZEOF_VOID_P EQUAL 4)
		message("32-bit Architecture")
		set(DIR_OCL $ENV{INTELOCLSDKROOT}/lib/x86)
	elseif(CMAKE_SIZEOF_VOID_P EQUAL 8)
		message("64-bit Architecture")
		set(DIR_OCL $ENV{INTELOCLSDKROOT}/lib/x64)
	else()
		message(FATAL_ERROR "Unknown Architecture")
	endif()
	message("Intel OpenCL Platform Found")
	set(FLAG_CL 1)
elseif(DEFINED ENV{CUDA_PATH})
	set(DIR_INC ./Headers $ENV{CUDA_PATH}/include)
	if(CMAKE_SIZEOF_VOID_P EQUAL 4)
		message("32-bit Architecture")
		set(DIR_OCL $ENV{CUDA_PATH}/lib/Win32)
	elseif(CMAKE_SIZEOF_VOID_P EQUAL 8)
		message("64-bit Architecture")
		set(DIR_OCL $ENV{CUDA_PATH}/lib/x64)
	else()
		message(FATAL_ERROR "Unknown Architecture")
	endif()
	message("NVIDIA OpenCL Platform Found")
	set(FLAG_CL 1)
else()
	if(CMAKE_SIZEOF_VOID_P EQUAL 4)
		message("32-bit Architecture")
	elseif(CMAKE_SIZEOF_VOID_P EQUAL 8)
		message("64-bit Architecture")
	else()
		message(FATAL_ERROR "Unknown Architecture")
	endif()
	message("No OpenCL Platform Found")
	set(DIR_INC ./Headers)
	set(FLAG_CL 0)
endif()

if(FLAG_CL)
	add_definitions(-D_CL)
endif()

set(CONFIG Release)
set(DIR_SRC ./Sources)
set(DIR_USE ./Mains)
set(DIR_OBJ ${CMAKE_BINARY_DIR}/Objects)
set(OPT_COMPILE /TC /WX /W4 /wd4201 /O2 /Ob2 /Oi /Ot /GL)
set(OPT_LINK /LTCG)

set(CMAKE_CONFIGURATION_TYPES ${CONFIG})
set(CMAKE_BUILD_TYPE ${CONFIG})
set(CMAKE_STATIC_LINKER_FLAGS ${OPT_LINK})
set(CMAKE_EXE_LINKER_FLAGS ${OPT_LINK})
set(CMAKE_SUPPRESS_REGENERATION true)

# MemClip
set(NAME memclip)
add_library(${NAME} STATIC ${DIR_SRC}/${NAME}.c)
target_include_directories(${NAME} PUBLIC ${DIR_INC})
target_compile_options(${NAME} PUBLIC ${OPT_COMPILE})

# PenClip
set(NAME penclip)
add_library(${NAME} STATIC ${DIR_SRC}/${NAME}.c)
target_include_directories(${NAME} PUBLIC ${DIR_INC})
target_compile_options(${NAME} PUBLIC ${OPT_COMPILE})

# BitClip
set(NAME bitclip)
add_library(${NAME} STATIC ${DIR_SRC}/${NAME}.c)
target_include_directories(${NAME} PUBLIC ${DIR_INC})
target_compile_options(${NAME} PUBLIC ${OPT_COMPILE})

# LinClip
set(NAME linclip)
add_library(${NAME} STATIC ${DIR_SRC}/${NAME}.c)
target_include_directories(${NAME} PUBLIC ${DIR_INC})
target_compile_options(${NAME} PUBLIC ${OPT_COMPILE})

# OpenCL Kernel Builder
if(FLAG_CL)
	set(NAME builder)
	add_executable(${NAME} ${DIR_USE}/${NAME}.c)
	target_include_directories(${NAME} PRIVATE ${DIR_INC})
	target_compile_options(${NAME} PRIVATE ${OPT_COMPILE})
	target_link_libraries(${NAME} PRIVATE ${DIR_OCL}/OpenCL.lib memclip penclip bitclip linclip)
endif()
